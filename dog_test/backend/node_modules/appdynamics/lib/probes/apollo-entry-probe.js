/*
This is for apollo-server entry probe 
*/

let HttpCommon = require("./http-common");

exports.ApolloEntryProbe = ApolloEntryProbe;

function ApolloEntryProbe(agent) {
  this.agent = agent;
}

ApolloEntryProbe.prototype.init = function () {};

ApolloEntryProbe.prototype.attach = function (obj, moduleName) {

  let self = this;

  if(moduleName == 'apollo-server') {
    self.agent.proxy.before(
      obj.ApolloServer.prototype,
      "createServerInfo",
      (args) => this.addLifeCycleHooks(args)
    );
  } else {
    const originalObject = obj;
    const overriddenObject = {};
  
    overriddenObject.startStandaloneServer = proxyStartStandaloneServer(self, originalObject);
    overriddenObject.__proto__ = originalObject;
    return overriddenObject;
  }

};

ApolloEntryProbe.prototype.addLifeCycleHooks = function (obj) {
  let self = this;
  let userDefinedContext = obj.context;
  obj.context = function ({ req, res }) {
    let userCtx;
    if (userDefinedContext instanceof Function) {
      userCtx = userDefinedContext.call(this, ...arguments);
    } else if (userDefinedContext instanceof Object) {
      userDefinedContext.gqlReq = req;
      userDefinedContext.gqlRes = res;
      return userDefinedContext;
    }
    return Object.assign({ gqlReq: req, gqlRes: res }, userCtx);
  };

  obj.plugins = [
    {
      requestDidStart() {
        return {
          didResolveOperation(response) {
            response.context.gqlReq.graphqlop = response.operationName;
            response.context.gqlReq.transactionStarted = true;
            HttpCommon.startTransactionHandler(
              response.context.gqlReq,
              response.context.gqlRes,
              self.agent
            );
          },

          didEncounterErrors(response) {
            response.context.gqlRes.error = response.errors[0];
            if(response.context.gqlReq.transactionStarted) {
              return;
            }
            HttpCommon.startTransactionHandler(
              response.context.gqlReq,
              response.context.gqlRes,
              self.agent
            );
          },
        };
      },
    },
    ...obj.plugins,
  ];
};

function proxyStartStandaloneServer(self, originalObject) {

  return async function startStandaloneServerProxy(server, options) {
    const overriddenOptions = options || {};

    const context = options ? options.context : undefined;
    const overriddenContext = async function (contextParam) {
      const contextValue =  context ? await context(contextParam) : {};
      contextValue.gqlReq = contextParam.req;
      contextValue.gqlRes = contextParam.res;
      return contextValue;
    };
    overriddenOptions.context = overriddenContext;

    const plugin = {
      async requestDidStart() {
        return {
          didResolveOperation(requestContext) {
            requestContext.contextValue.gqlReq.graphqlop = requestContext.operationName;
            requestContext.contextValue.gqlReq.transactionStarted = true;
            
            HttpCommon.startTransactionHandler(
              requestContext.contextValue.gqlReq,
              requestContext.contextValue.gqlRes,
              self.agent
            );
          },
          didEncounterErrors(requestContext) {
            requestContext.contextValue.gqlRes.error = requestContext.errors[0];
            if(requestContext.contextValue.gqlReq.transactionStarted) {
              return;
            }
            HttpCommon.startTransactionHandler(
              requestContext.contextValue.gqlReq,
              requestContext.contextValue.gqlRes,
              self.agent
            );
          },
        };
      }
    };
    server.addPlugin(plugin);
    return await originalObject.startStandaloneServer(server, overriddenOptions);
  };
}
